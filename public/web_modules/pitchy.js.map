{"version":3,"file":"pitchy.js","sources":["../node_modules/fft.js/lib/fft.js","../node_modules/next-pow-2/np2.js","../node_modules/pitchy/lib/index.mjs"],"sourcesContent":["'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","module.exports = function(v) {\n  v += v === 0\n  --v\n  v |= v >>> 1\n  v |= v >>> 2\n  v |= v >>> 4\n  v |= v >>> 8\n  v |= v >>> 16\n  return v + 1\n}\n","import FFT from 'fft.js';\nimport np2 from 'next-pow-2';\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * Return an array containing the autocorrelated input data.\n *\n * @param {number[]} input The input data.\n * @return {number[]} The autocorrelated input data.\n */\nfunction autocorrelate(input) {\n  // We need to double the input length to get correct results, and the FFT\n  // algorithm we use requires a size that's a power of 2.\n  var fft = new FFT(np2(2 * input.length));\n\n  // Step 0: pad the input array with zeros.\n  var paddedInput = new Array(fft.size);\n  input.forEach(function (val, idx) {\n    paddedInput[idx] = val;\n  });\n  paddedInput.fill(0, input.length);\n\n  // Step 1: get the DFT of the input array.\n  var tmp = fft.createComplexArray();\n  fft.realTransform(tmp, paddedInput);\n  // We need to fill in the right half of the array too.\n  fft.completeSpectrum(tmp);\n  // Step 2: multiply each entry by its conjugate.\n  for (var i = 0; i < tmp.length; i += 2) {\n    tmp[i] = tmp[i] * tmp[i] + tmp[i + 1] * tmp[i + 1];\n    tmp[i + 1] = 0;\n  }\n  // Step 3: perform the inverse transform.\n  var tmp2 = fft.createComplexArray();\n  fft.inverseTransform(tmp2, tmp);\n\n  // This last result (the inverse transform) contains the autocorrelation\n  // data, which is completely real.\n  var result = new Array(input.length);\n  for (var _i = 0; _i < input.length; _i++) {\n    result[_i] = tmp2[2 * _i];\n  }\n  return result;\n}\n\n/**\n * Return an array containing the computed values of the NDSF used in MPM.\n *\n * Specifically, this is equation (9) in the McLeod pitch method paper.\n */\nfunction ndsf(input) {\n  // The function r'(tau) is the autocorrelation.\n  var rPrimeArray = autocorrelate(input);\n  // The function m'(tau) (defined in equation (6)) can be computed starting\n  // with m'(0), which is equal to 2r'(0), and then iteratively modified to get\n  // m'(1), m'(2), etc.  For example, to get m'(1), we take m'(0) and subtract\n  // x_0^2 and x_{W-1}^2.  Then, to get m'(2), we take m'(1) and subtract x_1^2\n  // and x_{W-2}^2, and further values are similar.  We use m below as this\n  // value.\n  //\n  // The resulting array values are 2 * r'(tau) / m'(tau).\n  var m = 2 * rPrimeArray[0];\n  if (m === 0) {\n    // We don't want to trigger any divisions by zero; if the given input data\n    // consists of all zeroes, then so should the output data.\n    var result = new Array(rPrimeArray.length);\n    result.fill(0);\n    return result;\n  } else {\n    return rPrimeArray.map(function (rPrime, i) {\n      var mPrime = m;\n      var i2 = input.length - i - 1;\n      m -= input[i] * input[i] + input[i2] * input[i2];\n\n      return 2 * rPrime / mPrime;\n    });\n  }\n}\n\n/**\n * Return an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: the paper by McLeod proposes doing parabolic interpolation to get more\n * accurate key maxima; right now this implementation doesn't do that, but it\n * could be implemented later.\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima.\n  var keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum.\n  var lookingForMaximum = false;\n  // The largest local maximum found so far.\n  var max = void 0;\n  // The index of the largest local maximum so far.\n  var maxIndex = -1;\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i - 1] < 0 && input[i] > 0) {\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] < 0) {\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Return the pitch detected using McLeod Pitch Method (MPM) along with a\n * measure of its clarity.\n *\n * The clarity is a value between 0 and 1 (potentially inclusive) that\n * represents how \"clear\" the pitch was.  A clarity value of 1 indicates that\n * the pitch was very distinct, while lower clarity values indicate less\n * definite pitches.\n *\n * MPM is described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod\n * and Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * @param {number[]} input The time-domain input data.\n * @param {number} sampleRate The sample rate at which the input data was\n * collected.\n * @return {[number, number]} The detected pitch, in Hz, followed by the\n * clarity.\n */\nfunction findPitch(input, sampleRate) {\n  var ndsfArray = ndsf(input);\n  var keyMaximumIndices = getKeyMaximumIndices(ndsfArray);\n  if (keyMaximumIndices.length === 0) {\n    // No key maxima means that we either don't have enough data to analyze or\n    // that the data was flawed (such as an input array of zeroes).\n    return [0, 0];\n  }\n  // The constant k mentioned in section 5.  TODO: make this configurable.\n  var K = 0.9;\n  // The highest key maximum.\n  var nMax = Math.max.apply(Math, _toConsumableArray(keyMaximumIndices.map(function (i) {\n    return ndsfArray[i];\n  })));\n  // Following the paper, we return the pitch corresponding to the first key\n  // maximum higher than K * nMax.\n  var resultIndex = keyMaximumIndices.find(function (i) {\n    return ndsfArray[i] >= K * nMax;\n  });\n\n  return [sampleRate / resultIndex, ndsfArray[resultIndex]];\n}\n\nexport { autocorrelate, findPitch };\n"],"names":["fft","FFT"],"mappings":"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"}