{"version":3,"sources":["../../source/controllers/test.js"],"names":["test","express","Router","storage","multer","memoryStorage","upload","get","req","res","render","post","array","console","log","newlineRegex","cleanTab","body","tab","replace","input","slug","artist","title","lyrics","notes","data","Buffer","from","files","buffer","song","Song","save","catch","err","status"],"mappings":";;;;;;;;;AAEA;;AAIA;;AAGA;;;;AATA;AAGA,MAAMA,IAAI,GAAGC,iBAAQC,MAAR,EAAb,C,CAEA;;;AAKA,MAAMC,OAAO,GAAGC,gBAAOC,aAAP,EAAhB;;AACA,MAAMC,MAAM,GAAG,qBAAO;AAAEH,EAAAA,OAAO,EAAEA;AAAX,CAAP,CAAf;AAEAH,IAAI,CAACO,GAAL,CAAS,GAAT,EAAc,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxBA,EAAAA,GAAG,CAACC,MAAJ,CAAW,MAAX;AACH,CAFD;AAIAV,IAAI,CAACO,GAAL,CAAS,SAAT,EAAoB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9BA,EAAAA,GAAG,CAACC,MAAJ,CAAW,QAAX;AACH,CAFD;AAIAV,IAAI,CAACW,IAAL,CAAU,SAAV,EAAqBL,MAAM,CAACM,KAAP,CAAa,MAAb,EAAqB,CAArB,CAArB,EAA8C,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AAC9DI,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,MAAIC,YAAY,GAAG,OAAnB;AACA,MAAIC,QAAQ,GAAGR,GAAG,CAACS,IAAJ,CAASC,GAAT,CAAaC,OAAb,CAAqBJ,YAArB,EAAmC,IAAnC,CAAf;AACA,MAAIK,KAAK,GAAG;AACRC,IAAAA,IAAI,EAAEb,GAAG,CAACS,IAAJ,CAASI,IADP;AAERC,IAAAA,MAAM,EAAEd,GAAG,CAACS,IAAJ,CAASK,MAFT;AAGRC,IAAAA,KAAK,EAAEf,GAAG,CAACS,IAAJ,CAASM,KAHR;AAIRC,IAAAA,MAAM,EAAEhB,GAAG,CAACS,IAAJ,CAASO,MAJT;AAKRC,IAAAA,KAAK,EAAEjB,GAAG,CAACS,IAAJ,CAASQ,KALR;AAMRP,IAAAA,GAAG,EAAEF,QANG;AAORU,IAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAYpB,GAAG,CAACqB,KAAJ,CAAU,CAAV,EAAaC,MAAzB;AAPE,GAAZ;AAUA,MAAIC,IAAI,GAAG,IAAIC,aAAJ,CAASZ,KAAT,CAAX;AAEAW,EAAAA,IAAI,CAACE,IAAL,GAAYC,KAAZ,CAAkBC,GAAG,IAAI;AAAEtB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,GAAZ;AAAkB,GAA7C;AAEAtB,EAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAI,CAACb,GAAjB;AAEAT,EAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX;AACH,CArBD;eAuBepC,I","sourcesContent":["// index.js\n\nimport express from 'express'\nconst test = express.Router()\n\n// model\nimport Song from '../models/song.js'\n\n// deps\nimport multer from 'multer'\nconst storage = multer.memoryStorage()\nconst upload = multer({ storage: storage })\n\ntest.get('/', (req, res) => {\n    res.render('test')\n})\n\ntest.get('/upload', (req, res) => {\n    res.render('upload')\n})\n\ntest.post('/upload', upload.array('data', 1), async (req, res) => {\n    console.log(\"upload incoming!\")\n    let newlineRegex = /\\\\n/gi\n    let cleanTab = req.body.tab.replace(newlineRegex, '\\n')\n    var input = {\n        slug: req.body.slug,\n        artist: req.body.artist,\n        title: req.body.title,\n        lyrics: req.body.lyrics,\n        notes: req.body.notes,\n        tab: cleanTab,\n        data: Buffer.from(req.files[0].buffer)\n    }\n\n    let song = new Song(input)\n\n    song.save().catch(err => { console.log(err) });\n\n    console.log(song.tab)\n\n    res.status(200)\n})\n\nexport default test;\n"],"file":"test.js"}